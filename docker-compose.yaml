version: '3'

networks:
  internal:
    external: false

volumes:
  objectstoredata: {}
  postgres: {}
  waitforit: {}

services:
  # #
  # # SCIMMA admin database
  # #
  # admin-db:
  #   image: 'postgres:latest'
  #   container_name: admin-db
  #   env_file:
  #     - env.default
  #     - .env
  #   ports:
  #     - 127.0.0.1:5432:5432
  #   networks:
  #     - internal
  #   volumes:
  #     - postgres:/var/lib/postgresql
  # #
  # # SCIMMA admin database semaphore
  # #
  # admin-wait-for-db:
  #   image: 'postgres:latest'
  #   container_name: admin-wait-for-db
  #   env_file:
  #     - env.default
  #     - .env
  #   networks:
  #     - internal
  #   command:
  #     - sh
  #     - -c
  #     - >
  #       until pg_isready \
  #           --username=${POSTGRES_USER} \
  #           --dbname=${POSTGRES_DB} \
  #           --host=admin-db \
  #           --port=5432;
  #         do echo waiting for database;
  #         sleep 2;
  #         done;
  #         touch /tmp/db_ready_admin;
  #   volumes:
  #     - waitforit:/tmp
  # #
  # # SCIMMA admin init
  # #
  # admin-init:
  #   image: scimma-admin:dev
  #   build:
  #     context: /home/andrew/work/Projects/SCiMMA/src/scimma/scimma-admin
  #   container_name: admin-init
  #   env_file:
  #     - env.default
  #     - .env
  #   networks:
  #     - internal
  #   entrypoint:
  #     - '/bin/bash'
  #     - '-c'
  #     - >
  #       while [[ ! -f /tmp/db_ready_admin ]]; do
  #         echo waiting for database...;
  #         sleep 2;
  #       done;
  #       cd /app/scimma_admin && python3 manage.py migrate && python3 manage.py makemigrations && touch /tmp/admin_init_complete
  #   volumes:
  #     - waitforit:/tmp
  # #
  # # SCIMMA admin webserver
  # #
  # admin:
  #   image: scimma-admin:dev
  #   build:
  #     context: /home/andrew/work/Projects/SCiMMA/src/scimma/scimma-admin
  #     # args:
  #     #   - OIDC_RP_CLIENT_ID=dummy
  #     #   - OIDC_RP_CLIENT_SECRET=dummy
  #       # - OIDC_OP_AUTHORIZATION_ENDPOINT=${OIDC_OP_AUTHORIZATION_ENDPOINT}
  #       # - OIDC_OP_TOKEN_ENDPOINT=${OIDC_OP_TOKEN_ENDPOINT}
  #       # - OIDC_OP_USER_ENDPOINT=${OIDC_OP_USER_ENDPOINT}
  #       # - OIDC_RP_SIGN_ALGO=${OIDC_RP_SIGN_ALGO}
  #       # - OIDC_OP_JWKS_ENDPOINT=${OIDC_OP_JWKS_ENDPOINT}
  #   container_name: admin
  #   networks:
  #     - internal
  #   ports:
  #     - 127.0.0.1:8000:8000
  #   env_file:
  #     - env.default
  #     - .env
  #   entrypoint:
  #     - '/bin/bash'
  #     - '-c'
  #     - >
  #       while [[ ! -f /tmp/admin_init_complete ]]; do
  #         echo waiting for initialization...;
  #         sleep 2;
  #       done;
  #
  # Archive database: SQL database storing archived message metadata
  #
  archive-db:
    image: 'postgres:latest'
    container_name: archive-db
    env_file:
      - env.default
      - .env
    ports:
      - 127.0.0.1:5432:5432
    networks:
      - internal
    volumes:
      - postgres:/var/lib/postgresql
  #
  # Archive API server database semaphore
  #
  archive-wait-for-db:
    image: 'postgres:latest'
    container_name: archive-wait-for-db
    env_file:
      - env.default
      - .env
    networks:
      - internal
    command:
      - sh
      - -c
      - >
        until pg_isready \
            --username=${POSTGRES_USER} \
            --dbname=${POSTGRES_DB} \
            --host=archive-db \
            --port=5432;
          do echo waiting for database;
          sleep 2;
          done;
          touch /tmp/db_ready_archive;
    volumes:
      - waitforit:/tmp
  #
  # Archive API server: RESTful webserver interface to archived data
  #
  archive-api:
    image: scimma-archive-api:dev
    build:
      context: .
      dockerfile: ./Dockerfile
    container_name: archive-api
    entrypoint:
      - '/bin/bash'
      - '-c'
      - >
        while [[ ! -f /tmp/db_ready_archive ]]; do
          echo waiting for database...;
          sleep 2;
        done;
        uvicorn --app-dir=/root --host=0.0.0.0 archive_api:app
    networks:
      - internal
    ports:
      - 127.0.0.1:8000:8000
    env_file:
      - env.default
      - .env
    environment:
      - CONFIG_FILE=/etc/config.toml
    volumes:
      - waitforit:/tmp
      - ./config.toml:/etc/config.toml:ro
  #
  # Ingest: Script consuming hop messages and storing in archive
  #
  ingest:
    image: scimma-archive-ingest:dev
    container_name: archive-ingest
    networks:
      - internal
    env_file:
      - env.default
      - .env
    environment:
      - CONFIG_FILE=/etc/config.toml
    entrypoint:
      - '/bin/bash'
      - '-c'
      - >
        while [[ ! -f /tmp/db_ready_archive ]]; do
          echo waiting for database...;
          sleep 2;
        done;
        /root/archive_ingest.py
    volumes:
      - waitforit:/tmp
      - ./config.toml:/etc/config.toml:ro
  #
  # MinIO: S3-compatible object store for archived message data
  #
  object-store:
    image: quay.io/minio/minio:RELEASE.2023-01-31T02-24-19Z
    container_name: object-store
    env_file:
      - env.default
      - .env
    ports:
      - 127.0.0.1:9000:9000
      - 127.0.0.1:9001:9001
    networks:
      - internal
    command:
    - server
    - /data
    - --console-address
    - ":9001"
    volumes:
      - objectstoredata:/data
